blueprint:
  name: Occupancy-activated Light
  description: Turn on a light when occupancy is detected.
  domain: automation
  source_url: https://github.com/AkazaRenn/Home-Assistant/blob/main/occupancy_activated_light.yaml
  input:
    basic_section:
      name: Basic
      input:
        occupancy_entity:
          name: Occupancy Sensor
          selector:
            entity:
              filter:
                domain: binary_sensor
        light_target:
          name: Light
          selector:
            target:
              entity:
                domain: light
    wait_time_section:
      name: Wait Time
      input:
        no_occupancy_wait_sec_min:
          name: Min Wait time
          description: Minimum time to leave the light on after last occupancy is detected.
          default: 0
          selector:
            number:
              min: 0
              max: 3600
              unit_of_measurement: seconds
              mode: box
        no_occupancy_wait_sec_max:
          name: Max Wait time
          description: Maximum time to leave the light on after last occupancy is detected.
          default: 300
          selector:
            number:
              min: 0
              max: 3600
              unit_of_measurement: seconds
              mode: box
        up_time_to_no_occupancy_wait_ratio:
          name: Up Time to Wait Time Ratio
          description: Light on time = occupancy time * this ratio
          default: 1
          selector:
            number:
              min: 0
              max: 100
              mode: box
              step: 0.01
        wait_time_compensation:
          name: Wait Time Compensation
          description: Compensation time for the sensor to detect the absence
          default: 0
          selector:
            number:
              min: 0
              max: 3600
              unit_of_measurement: seconds
              mode: box
    advanced_section:
      name: Advanced
      input:
        boolean_confirmer:
          name: Boolean Confirmer
          description: The boolean value to check before turning on the light
          selector:
            entity:
              domain: input_boolean
        boolean_confirmer_expected_state:
          name: Boolean Confirmer Expected State
          selector:
            select:
              options:
                - "on"
                - "off"
        brightness_target:
          name: Brightness Value
          description: The number entity to set the brightness to
          default: null
          selector:
            entity:
              domain:
                - sensor
                - input_number
        color_temperature_target:
          name: Color Temperature Value
          description: The number entity to set the color temperature to
          default: null
          selector:
            entity:
              domain:
                - sensor
                - input_number
        automation_during_occupancy:
          name: Automation During Occupancy
          description: The automation to enable during the occupancy.
          default: null
          selector:
            entity:
              domain: automation

mode: restart

trigger:
  - platform: state
    entity_id: !input occupancy_entity
    to: "on"
  - platform: state
    entity_id: !input boolean_confirmer

condition:
  - condition: state
    entity_id: !input occupancy_entity
    state: "on"

variables:
  input_light_target: !input light_target
  input_brightness_target: !input brightness_target
  input_color_temperature_target: !input color_temperature_target
  input_no_occupancy_wait_sec_min: !input no_occupancy_wait_sec_min
  input_no_occupancy_wait_sec_max: !input no_occupancy_wait_sec_max
  input_up_time_to_no_occupancy_wait_ratio: !input up_time_to_no_occupancy_wait_ratio
  input_wait_time_compensation: !input wait_time_compensation
  input_automation_during_occupancy: !input automation_during_occupancy

  temp_brightness_percent: >
    {% if input_brightness_target %}
      {{ states(input_brightness_target) | float }}
    {% else %}
      100
    {% endif %}
  temp_color_temperature_kelvin: >
    {% if input_color_temperature_target %}
      {{ states(input_color_temperature_target) | int }}
    {% else %}
      6500
    {% endif %}
  temp_occupancy_start_sec: "{{ as_timestamp(now()) | int }}"
  temp_no_occupancy_wait_sec_min: "{{ min(input_no_occupancy_wait_sec_min, input_no_occupancy_wait_sec_max) }}"
  temp_no_occupancy_wait_sec_max: "{{ max(input_no_occupancy_wait_sec_min, input_no_occupancy_wait_sec_max) }}"

action:
  - if:
      - condition: state
        entity_id: !input boolean_confirmer
        state: !input boolean_confirmer_expected_state
    then:
      sequence:
        - if:
            - "{{ temp_brightness_percent > 0 }}"
          then:
            - service: light.turn_on
              target: "{{ input_light_target }}"
              data:
                brightness_pct: "{{ temp_brightness_percent }}"
                color_temp_kelvin: "{{ temp_color_temperature_kelvin }}"
                transition: 1
        - if:
            - "{{ input_automation_during_occupancy != None }}"
          then:
            - service: automation.turn_on
              target:
                entity_id: "{{ input_automation_during_occupancy }}"
            - service: automation.trigger
              target:
                entity_id: "{{ input_automation_during_occupancy }}"
        - alias: "Wait until the occupancy clearance from device"
          wait_for_trigger:
            platform: state
            entity_id: !input occupancy_entity
            to: "off"
        - variables:
            temp_no_occupancy_wait_sec: "{{ min(temp_no_occupancy_wait_sec_max, max(temp_no_occupancy_wait_sec_min, input_up_time_to_no_occupancy_wait_ratio * max(0, (as_timestamp(now()) | int) - temp_occupancy_start_sec - input_wait_time_compensation))) }}"
        - delay: "{{ temp_no_occupancy_wait_sec }}"
  - if:
      - "{{ input_automation_during_occupancy != None }}"
    then:
      - service: automation.turn_off
        target:
          entity_id: "{{ input_automation_during_occupancy }}"
  - repeat:
      until:
        - condition: template
          value_template: >
            {% if input_light_target.device_id is defined %}
              {{ is_state(device_entities(input_light_target.device_id) | first , 'off') }}
            {% elif input_light_target.entity_id is defined %}
              {{ is_state(input_light_target.entity_id , 'off') }}
            {% else %}
              {{ expand(area_entities( input_light_target.area_id)) | selectattr('domain' , 'eq' , 'light') | rejectattr('state' , 'eq' , 'off') | list | count == 0 }}
            {% endif %}
      sequence:
        - service: light.turn_off
          target: "{{ input_light_target }}"
          data:
            transition: 1
        - delay:
            seconds: 30
